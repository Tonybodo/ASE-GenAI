Hi I need a sql query for the following task:
“Find all messages longer than 100 characters that have been liked by at least 20
people. Only consider messages where at least half of the likes are from people that
are foreign to the message’s creator, with a foreigner being a person that neither the
creator nor any of their friends know. For each message, return the message’s id, the
total number of likes and the number of foreign likes. Sort the returned messages by
the ratio of foreign likes from highest to lowest.”
here is the schema


create table post (
    m_messageid bigint not null,
    m_ps_imagefile varchar,
    m_creationdate timestamp with time zone not null,
    m_locationip varchar not null,
    m_browserused varchar not null,
    m_ps_language varchar,
    m_content text,
    m_length int not null,
    m_creatorid bigint not null,
    m_ps_forumid bigint,
    m_locationid bigint not null
);

create table comment (
    m_messageid bigint not null,
    m_creationdate timestamp with time zone not null,
    m_locationip varchar not null,
    m_browserused varchar not null,
    m_content text,
    m_length int not null,
    m_creatorid bigint not null,
    m_locationid bigint not null,
    m_replyof_post bigint,
    m_replyof_comment bigint
);

create table forum (
   f_forumid bigint not null,
   f_title varchar not null,
   f_creationdate timestamp with time zone not null,
   f_moderatorid bigint not null
);

create table forum_person (
   fp_forumid bigint not null,
   fp_personid bigint not null,
   fp_joindate timestamp with time zone not null
);

create table forum_tag (
   ft_forumid bigint not null,
   ft_tagid bigint not null
);

create table organisation (
   o_organisationid bigint not null,
   o_type varchar not null,
   o_name varchar not null,
   o_url varchar not null,
   o_placeid bigint not null
);

create table person (
   p_personid bigint not null,
   p_firstname varchar not null,
   p_lastname varchar not null,
   p_gender varchar not null,
   p_birthday date not null,
   p_creationdate timestamp with time zone not null,
   p_locationip varchar not null,
   p_browserused varchar not null,
   p_placeid bigint not null
);

create table person_email (
   pe_personid bigint not null,
   pe_email varchar not null
);


create table person_tag (
   pt_personid bigint not null,
   pt_tagid bigint not null
);

create table knows (
   k_person1id bigint not null,
   k_person2id bigint not null,
   k_creationdate timestamp with time zone not null
);

create table likes (
   l_personid bigint not null,
   l_messageid bigint not null,
   l_creationdate timestamp with time zone not null
);

create table person_language (
   plang_personid bigint not null,
   plang_language varchar not null
);

create table person_university (
   pu_personid bigint not null,
   pu_organisationid bigint not null,
   pu_classyear int not null
);

create table person_company (
   pc_personid bigint not null,
   pc_organisationid bigint not null,
   pc_workfrom int not null
);

create table place (
   pl_placeid bigint not null,
   pl_name varchar not null,
   pl_url varchar not null,
   pl_type varchar not null,
   pl_containerplaceid bigint -- null for continents
);

create table country (
    ctry_city bigint not null,
    ctry_name varchar not null
);

create table message (
    m_messageid bigint not null,
    m_ps_imagefile varchar,
    m_creationdate timestamp with time zone not null,
    m_locationip varchar not null,
    m_browserused varchar not null,
    m_ps_language varchar,
    m_content text,
    m_length int not null,
    m_creatorid bigint not null,
    m_locationid bigint not null,
    m_ps_forumid bigint,
    m_c_replyof bigint
);

create table message_tag (
   mt_messageid bigint not null,
   mt_tagid bigint not null
);

create table tagclass (
   tc_tagclassid bigint not null,
   tc_name varchar not null,
   tc_url varchar not null,
   tc_subclassoftagclassid bigint -- null for the root tagclass (Thing)
);

create table tag (
   t_tagid bigint not null,
   t_name varchar not null,
   t_url varchar not null,
   t_tagclassid bigint not null
);
ChatGPT said:
ChatGPT
To create this query, we need to address each condition step by step. Here's how we can achieve this:

Filter messages: Only consider messages longer than 100 characters.
Count likes: For each message, count total likes.
Identify foreign likes: Determine which likes are from "foreigners."
We define a foreigner as a person who is not directly known by the creator of the message and who has no common friends with the creator.
Check foreign likes condition: Include messages where at least half of the likes are from foreigners.
Return data: For each message, retrieve the message's id, total likes count, and foreign likes count.
Sort by foreign like ratio: Order the messages by the ratio of foreign likes to total likes, from highest to lowest.
Here’s the SQL query that should accomplish the above:

sql
Copy code
WITH LikeCounts AS (
    SELECT 
        l.l_messageid AS message_id,
        COUNT(*) AS total_likes
    FROM 
        likes l
    JOIN 
        message m ON l.l_messageid = m.m_messageid
    WHERE 
        m.m_length > 100
    GROUP BY 
        l.l_messageid
    HAVING 
        COUNT(*) >= 20
),
ForeignLikes AS (
    SELECT 
        l.l_messageid AS message_id,
        COUNT(*) AS foreign_likes
    FROM 
        likes l
    JOIN 
        message m ON l.l_messageid = m.m_messageid
    LEFT JOIN 
        knows k1 ON k1.k_person1id = m.m_creatorid AND k1.k_person2id = l.l_personid
    LEFT JOIN 
        knows k2 ON k2.k_person1id = l.l_personid AND k2.k_person2id = m.m_creatorid
    LEFT JOIN 
        knows mutual ON (mutual.k_person1id = m.m_creatorid AND mutual.k_person2id IN 
                         (SELECT k.k_person2id FROM knows k WHERE k.k_person1id = l.l_personid))
    WHERE 
        m.m_length > 100
        AND k1.k_person2id IS NULL 
        AND k2.k_person1id IS NULL 
        AND mutual.k_person1id IS NULL
    GROUP BY 
        l.l_messageid
)
SELECT 
    lc.message_id,
    lc.total_likes,
    fl.foreign_likes
FROM 
    LikeCounts lc
JOIN 
    ForeignLikes fl ON lc.message_id = fl.message_id
WHERE 
    fl.foreign_likes >= (lc.total_likes / 2)
ORDER BY 
    (fl.foreign_likes::float / lc.total_likes) DESC;
Explanation
LikeCounts CTE: This part filters messages longer than 100 characters and groups them to get the total number of likes for each message, only including those with at least 20 likes.
ForeignLikes CTE: This section finds likes by "foreigners" by:
Joining the knows table twice to confirm that neither the creator nor the liker knows each other.
Checking that the liker has no mutual friends with the creator.
The final SELECT statement joins these two CTEs and filters for messages where at least half of the likes are from foreigners. It then sorts the messages by the ratio of foreign likes to total likes, in descending order.
This query should address the requirements as stated, but consider testing with real data to verify performance and correctness, as these self-referential and conditional joins can be computationally intensive.






You said:
Thanks a lot! Can you please incorporate the following additional requirement into the query?
"For each message, also return the full name of the first foreign person who liked the message and the time when they created the like."
ChatGPT said:
ChatGPT
To incorporate this additional requirement, we need to:

Identify the first foreign person who liked the message.
Retrieve their full name (p_firstname and p_lastname) and the timestamp of their like (l_creationdate).
We can achieve this by extending the ForeignLikes CTE to include the information about the first foreign liker. Here's the updated query:

sql
Copy code
WITH LikeCounts AS (
    SELECT 
        l.l_messageid AS message_id,
        COUNT(*) AS total_likes
    FROM 
        likes l
    JOIN 
        message m ON l.l_messageid = m.m_messageid
    WHERE 
        m.m_length > 100
    GROUP BY 
        l.l_messageid
    HAVING 
        COUNT(*) >= 20
),
ForeignLikes AS (
    SELECT 
        l.l_messageid AS message_id,
        COUNT(*) AS foreign_likes,
        MIN(l.l_creationdate) AS first_foreign_like_time
    FROM 
        likes l
    JOIN 
        message m ON l.l_messageid = m.m_messageid
    LEFT JOIN 
        knows k1 ON k1.k_person1id = m.m_creatorid AND k1.k_person2id = l.l_personid
    LEFT JOIN 
        knows k2 ON k2.k_person1id = l.l_personid AND k2.k_person2id = m.m_creatorid
    LEFT JOIN 
        knows mutual ON (mutual.k_person1id = m.m_creatorid AND mutual.k_person2id IN 
                         (SELECT k.k_person2id FROM knows k WHERE k.k_person1id = l.l_personid))
    WHERE 
        m.m_length > 100
        AND k1.k_person2id IS NULL 
        AND k2.k_person1id IS NULL 
        AND mutual.k_person1id IS NULL
    GROUP BY 
        l.l_messageid
),
FirstForeignLiker AS (
    SELECT DISTINCT ON (l.l_messageid)
        l.l_messageid AS message_id,
        p.p_firstname || ' ' || p.p_lastname AS first_foreign_liker_name,
        l.l_creationdate AS first_foreign_like_time
    FROM 
        likes l
    JOIN 
        message m ON l.l_messageid = m.m_messageid
    JOIN 
        person p ON p.p_personid = l.l_personid
    LEFT JOIN 
        knows k1 ON k1.k_person1id = m.m_creatorid AND k1.k_person2id = l.l_personid
    LEFT JOIN 
        knows k2 ON k2.k_person1id = l.l_personid AND k2.k_person2id = m.m_creatorid
    LEFT JOIN 
        knows mutual ON (mutual.k_person1id = m.m_creatorid AND mutual.k_person2id IN 
                         (SELECT k.k_person2id FROM knows k WHERE k.k_person1id = l.l_personid))
    WHERE 
        m.m_length > 100
        AND k1.k_person2id IS NULL 
        AND k2.k_person1id IS NULL 
        AND mutual.k_person1id IS NULL
    ORDER BY 
        l.l_messageid, l.l_creationdate
)
SELECT 
    lc.message_id,
    lc.total_likes,
    fl.foreign_likes,
    ffl.first_foreign_liker_name,
    ffl.first_foreign_like_time
FROM 
    LikeCounts lc
JOIN 
    ForeignLikes fl ON lc.message_id = fl.message_id
JOIN 
    FirstForeignLiker ffl ON lc.message_id = ffl.message_id
WHERE 
    fl.foreign_likes >= (lc.total_likes / 2)
ORDER BY 
    (fl.foreign_likes::float / lc.total_likes) DESC;
Changes and Additions
FirstForeignLiker CTE:

Uses DISTINCT ON to select the first foreign liker for each message, based on the l_creationdate.
Retrieves the full name (p_firstname || ' ' || p_lastname) and like creation time (l_creationdate).
Ensures the liker is foreign using the same criteria from the ForeignLikes CTE.
Join FirstForeignLiker:

In the final SELECT, includes the foreign liker’s name and the timestamp of their like.
Output Columns:

Adds first_foreign_liker_name and first_foreign_like_time to the result.
This query now satisfies the additional requirement while preserving the previous functionality.